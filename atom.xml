<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tosuke&#39;s blog</title>
  <subtitle>役に立(つ/たない)技術情報やポエム</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://tosuke.github.io/"/>
  <updated>2017-05-03T16:49:44.394Z</updated>
  <id>https://tosuke.github.io/</id>
  
  <author>
    <name>Tosuke</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>D言語と私</title>
    <link href="https://tosuke.github.io/2017/05/04/cj2985e600006nyfgcjv46u56/"/>
    <id>https://tosuke.github.io/2017/05/04/cj2985e600006nyfgcjv46u56/</id>
    <published>2017-05-03T16:01:45.000Z</published>
    <updated>2017-05-03T16:49:44.394Z</updated>
    
    <content type="html"><![CDATA[<p>眠れないので。</p>
<h1 id="D言語との出会い"><a href="/blog/2017/05/04/cj2985e600006nyfgcjv46u56/#D言語との出会い" class="headerlink" title="D言語との出会い"></a>D言語との出会い</h1><p>私がD言語と出会ったのはほぼ1年前、高校2年の春だった。<br>当時部活を辞め、暇をもて余していた私は、<a href="http://www.nicovideo.jp/watch/sm28900081" target="_blank" rel="external">プチコンで動画再生する謎システム</a>を作ったりTwitterでの活動をするようになるなど、あり余る時間を使って多くのことを始めていた。<br>その中で、当時の私にとって最も大きなものは御茶会での活動である。<br>当時の御茶会では竹輪部というサークル名でゲームの製作をしようという計画が持ち上がっていた。<br>そして私は、何を考えたのかゲームエンジンを自作しようとしたのだ。</p>
<p><strong>D言語で。</strong></p>
<p>扱い始めたばかりの言語でゲームエンジンなどという巨大なプログラムを作成するなどどう考えても無謀である。<br>そして、設計のセの字も理解していなかった私のプロジェクトは、(大方の予想通り)わずか数週間で頓挫した。<br>それでも、私はD言語の扱いやすさを深く認識し、D言語erとしての道を進んでいくことになったのだった。</p>
<h1 id="D言語で言語処理系"><a href="/blog/2017/05/04/cj2985e600006nyfgcjv46u56/#D言語で言語処理系" class="headerlink" title="D言語で言語処理系"></a>D言語で言語処理系</h1><p>smilebasicのPC版処理系として有名なものとして<a href="https://github.com/otya128/otyaSMILEBASIC" target="_blank" rel="external">otyaSMILEBASIC</a>があるが、ソースが全体的に魔界で(パーサが手書きされていたりする)、バグ修正や機能追加をしたくても難しかった。<br>そこで私は、「ソースの読めるsmilebasic処理系を作ろう」と思いたち、<a href="https://github.com/Tosuke/tosukeSmileBasic" target="_blank" rel="external">tosukeSmileBasic</a>を作りはじめた。<br>パーサには<a href="https://code.dlang.org/packages/pegged" target="_blank" rel="external">pegged</a>を使い、ハックしやすく扱いやすい、言うなれば「ぼくの考えたさいきょうのsmilebasic」が完成する。<br>はずだった。</p>
<h2 id="「D言語は仕様はいいけどライブラリに恵まれない」"><a href="/blog/2017/05/04/cj2985e600006nyfgcjv46u56/#「D言語は仕様はいいけどライブラリに恵まれない」" class="headerlink" title="「D言語は仕様はいいけどライブラリに恵まれない」"></a>「D言語は仕様はいいけどライブラリに恵まれない」</h2><p>ところがこのpeggedがかなりの問題児だった。<br>問題として</p>
<ul>
<li>パーサ内に書けるセマンティックアクションの制限が強い(ParseTreeを返す必要がある)</li>
<li>「どの非終端記号でパースされたのか」を示す情報が文字列で渡されるので、Dの型システムの恩恵を受けられない</li>
<li>パーサコンビネータの生成した中間の木もそのまま渡されるので、それを弾くために処理が煩雑になる</li>
</ul>
<p>などがある。このため段々パーサを書くのが億劫になり、頓挫してしまった。<br>ちなみに、私は現在peggedの反省を踏まえてパーサコンビネータを書いている。<br>これを使えば、tosukeSmileBasicのリベンジができるのではないかと考えている。</p>
<p>眠くなってきたので続きはまた明日。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;眠れないので。&lt;/p&gt;
&lt;h1 id=&quot;D言語との出会い&quot;&gt;&lt;a href=&quot;/blog/2017/05/04/cj2985e600006nyfgcjv46u56/#D言語との出会い&quot; class=&quot;headerlink&quot; title=&quot;D言語との出会い&quot;&gt;&lt;/a&gt;D言語と
    
    </summary>
    
      <category term="poem" scheme="https://tosuke.github.io/categories/poem/"/>
    
      <category term="technology" scheme="https://tosuke.github.io/categories/poem/technology/"/>
    
    
      <category term="dlang" scheme="https://tosuke.github.io/tags/dlang/"/>
    
  </entry>
  
  <entry>
    <title>ddoxを使う</title>
    <link href="https://tosuke.github.io/2017/03/21/cj2985e5v0005nyfg9eymj2i6/"/>
    <id>https://tosuke.github.io/2017/03/21/cj2985e5v0005nyfg9eymj2i6/</id>
    <published>2017-03-21T14:35:34.000Z</published>
    <updated>2017-03-22T06:11:21.546Z</updated>
    
    <content type="html"><![CDATA[<p>皆さん、D言語使ってますか？<br>ドキュメント書いてますか？(ブーメラン)</p>
<h1 id="ddoxとは"><a href="/blog/2017/03/21/cj2985e5v0005nyfg9eymj2i6/#ddoxとは" class="headerlink" title="ddoxとは"></a>ddoxとは</h1><p><a href="https://github.com/rejectedsoftware/ddox" target="_blank" rel="external">ddox</a>は、D言語界隈では馴染みの深いRejected Softwareによって開発されている、高機能なドキュメント生成エンジンです。同じくRejected Softwareによって開発されている<a href="http://vibed.org/" target="_blank" rel="external">vibe.d</a>によってサーバーを建ててドキュメントを閲覧したり、静的にドキュメントを生成してgithub pagesに配置しておくこともできます。事前にフィルタをかけることでドキュメントとして公開するモジュールを制御することも可能な、とても強力なツールです。</p>
<h1 id="ddoxを使う"><a href="/blog/2017/03/21/cj2985e5v0005nyfg9eymj2i6/#ddoxを使う" class="headerlink" title="ddoxを使う"></a>ddoxを使う</h1><p>ddoxはRejected Softwareによって開発されているので、Rejected Softwareを中心に開発されている<a href="https://github.com/dlang/dub" target="_blank" rel="external">dub</a>を使っている場合は簡単に利用できます。<br>試しに現在私が開発中のライブラリ<a href="https://github.com/Tosuke/dpromise" target="_blank" rel="external">dpromise</a>のドキュメントを生成してみましょう。<br>今回は、ddoxが生成するドキュメントをきれいに表示してくれるライブラリ<a href="https://github.com/MartinNowak/scod" target="_blank" rel="external">scod</a>を利用することにします。<br>ddoxで利用するテーマを変更する場合、dub.jsonに<code>&quot;-ddoxTool&quot;: &quot;scod&quot;</code>と記述します。<br>それでは生成してみましょう。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ dub run --build=ddox</div></pre></td></tr></table></figure></p>
<p><img src="/blog/2017/03/21/cj2985e5v0005nyfg9eymj2i6/scod.jpg" alt="scod"></p>
<p>いい感じですね。また、<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ dub build --build=ddox</div></pre></td></tr></table></figure></p>
<p>とすることでdocsフォルダに静的にページを生成してくれます。</p>
<h1 id="落とし穴"><a href="/blog/2017/03/21/cj2985e5v0005nyfg9eymj2i6/#落とし穴" class="headerlink" title="落とし穴"></a>落とし穴</h1><p>このように非常に便利なddoxですが、大きな落とし穴があります。<br>もし、あなたが複雑な設定をするために自力でddoxを利用する設定を書いたとします。<br>例えば、<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">"buildTypes": &#123;</div><div class="line">  "ddoc": &#123;</div><div class="line">    "dflags": [</div><div class="line">      "-Xfdocs.json"</div><div class="line">    ],</div><div class="line">    "postBuildCommands": [</div><div class="line">      "dub run scod -- filter --only-documented --unittest-examples docs.json",</div><div class="line">      "dub run scod -- generate-html docs.json docs"</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>これをdub.jsonに追記し、<code>$ dub build --build=ddoc</code>を実行したとします。<br>その場合、このようなエラーを吐くことがあります(私はこれにハマりました)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">core.exception.RangeError@../../.dub/packages/ddox-0.15.18/ddox/source/ddox/parsers/jsonparser.d(469): Range violation</div><div class="line">----------------</div><div class="line">??:? _d_arraybounds [0xbd1d33]</div><div class="line">??:? ddox.parsers.jsonparser.__array [0x97398a]</div><div class="line">??:? _D4ddox7parsers10jsonparser6Parser14parseBasicTypeMFKAAyaC4ddox8entities6EntityJAAyaZ15parseAttributesMFNaNbNfKAAyaAxAyaZv [0x978989]</div><div class="line">??:? ddox.entities.Type ddox.parsers.jsonparser.Parser.parseBasicType(ref immutable(char)[][], ddox.entities.Entity, out immutable(char)[][]) [0x978793]</div><div class="line">??:? ddox.entities.Type ddox.parsers.jsonparser.Parser.parseType(ref immutable(char)[][], ddox.entities.Entity) [0x9768dd]</div><div class="line">??:? ddox.entities.Type ddox.parsers.jsonparser.Parser.parseTypeDecl(ref immutable(char)[][], ddox.entities.Entity) [0x976863]</div><div class="line">??:? ddox.entities.Type ddox.parsers.jsonparser.Parser.parseType(immutable(char)[], ddox.entities.Entity) [0x976535]</div><div class="line">??:? ddox.entities.Type ddox.parsers.jsonparser.Parser.parseType(vibe.data.json.Json, ddox.entities.Entity, immutable(char)[], bool) [0x976449]</div><div class="line">??:? ddox.entities.FunctionDeclaration ddox.parsers.jsonparser.Parser.parseFunctionDecl(vibe.data.json.Json, ddox.entities.Entity) [0x974f7e]</div><div class="line">??:? ddox.entities.Declaration ddox.parsers.jsonparser.Parser.parseDecl(vibe.data.json.Json, ddox.entities.Entity) [0x974537]</div><div class="line">??:? _D4ddox7parsers10jsonparser6Parser13parseDeclListMFS4vibe4data4json4JsonC4ddox8entities6EntityZ14__foreachbody3MFKS4vibe4data4json4JsonZi [0x974200]</div><div class="line">??:? <a href="https://twitter.com/trusted" target="_blank" rel="noopener noreferrer">@trusted</a> int vibe.data.json.Json.opApply(scope int delegate(ref vibe.data.json.Json)) [0xbb9c39]</div><div class="line">??:? ddox.entities.Declaration[] ddox.parsers.jsonparser.Parser.parseDeclList(vibe.data.json.Json, ddox.entities.Entity) [0x97419e]</div><div class="line">??:? ddox.entities.TemplateDeclaration ddox.parsers.jsonparser.Parser.parseTemplateDecl(vibe.data.json.Json, ddox.entities.Entity) [0x976223]</div><div class="line">??:? ddox.entities.Declaration ddox.parsers.jsonparser.Parser.parseDecl(vibe.data.json.Json, ddox.entities.Entity) [0x97463a]</div><div class="line">??:? _D4ddox7parsers10jsonparser6Parser13parseDeclListMFS4vibe4data4json4JsonC4ddox8entities6EntityZ14__foreachbody3MFKS4vibe4data4json4JsonZi [0x974200]</div><div class="line">??:? <a href="https://twitter.com/trusted" target="_blank" rel="noopener noreferrer">@trusted</a> int vibe.data.json.Json.opApply(scope int delegate(ref vibe.data.json.Json)) [0xbb9c39]</div><div class="line">??:? ddox.entities.Declaration[] ddox.parsers.jsonparser.Parser.parseDeclList(vibe.data.json.Json, ddox.entities.Entity) [0x97419e]</div><div class="line">??:? void ddox.parsers.jsonparser.Parser.parseModule(vibe.data.json.Json, ddox.entities.Package) [0x9740d4]</div><div class="line">??:? int ddox.parsers.jsonparser.parseJsonDocs(vibe.data.json.Json, ddox.entities.Package).__foreachbody3(ref vibe.data.json.Json) [0x973a9d]</div><div class="line">??:? <a href="https://twitter.com/trusted" target="_blank" rel="noopener noreferrer">@trusted</a> int vibe.data.json.Json.opApply(scope int delegate(ref vibe.data.json.Json)) [0xbb9c39]</div><div class="line">??:? ddox.entities.Package ddox.parsers.jsonparser.parseJsonDocs(vibe.data.json.Json, ddox.entities.Package) [0x973a35]</div><div class="line">??:? ddox.entities.Package ddox.main.parseDocFile(immutable(char)[], ddox.settings.DdoxSettings) [0x969835]</div><div class="line">??:? int ddox.main.setupGeneratorInput(ref immutable(char)[][], out ddox.settings.GeneratorSettings, out ddox.entities.Package) [0x9683bc]</div><div class="line">??:? int ddox.main.cmdGenerateHtml(immutable(char)[][]) [0x967d7a]</div><div class="line">??:? int ddox.main.ddoxMain(immutable(char)[][]) [0x967c0d]</div><div class="line">??:? _Dmain [0x967307]</div><div class="line">??:? _D2rt6dmain211_d_run_mainUiPPaPUAAaZiZ6runAllMFZ9__lambda1MFZv [0xbd8406]</div><div class="line">??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate()) [0xbd834c]</div><div class="line">??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0xbd83c2]</div><div class="line">??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate()) [0xbd834c]</div><div class="line">??:? _d_run_main [0xbd82c6]</div><div class="line">??:? main [0x967a17]</div><div class="line">??:? __libc_start_main [0x111f8510]</div></pre></td></tr></table></figure></p>
<p>これはddox側に問題があるようです。<br>あまり推奨できる方法ではありませんが、パッケージを直接書きかえることで対処することができます。<br>.dub/packages下にある使用しているddoxパッケージの中、source/parsers/jsonparser.dの469行目付近<br><figure class="highlight d"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> parseAttributes(<span class="keyword">ref</span> <span class="built_in">string</span>[] dst, <span class="keyword">const</span>(<span class="built_in">string</span>)[] keywords)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">while</span>( tokens.length &gt; <span class="number">0</span> )&#123;</div><div class="line">		<span class="keyword">if</span>( tokens.front == <span class="string">"@"</span> )&#123;</div><div class="line">			tokens.popFront();</div><div class="line">			dst ~= <span class="string">"@"</span>~tokens.front;</div><div class="line">			tokens.popFront();</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span>( keywords.countUntil(tokens[<span class="number">0</span>]) &gt;= <span class="number">0</span> &amp;&amp; tokens[<span class="number">1</span>] != <span class="string">"("</span> )&#123;</div><div class="line">			dst ~= tokens.front;</div><div class="line">			tokens.popFront();</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">break</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>を<br><figure class="highlight d"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> parseAttributes(<span class="keyword">ref</span> <span class="built_in">string</span>[] dst, <span class="keyword">const</span>(<span class="built_in">string</span>)[] keywords)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">while</span>( tokens.length &gt; <span class="number">0</span> )&#123;</div><div class="line">		<span class="keyword">if</span>( tokens.front == <span class="string">"@"</span> )&#123;</div><div class="line">			tokens.popFront();</div><div class="line">			dst ~= <span class="string">"@"</span>~tokens.front;</div><div class="line">			tokens.popFront();</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span>( keywords.countUntil(tokens[<span class="number">0</span>]) &gt;= <span class="number">0</span> &amp;&amp; tokens.length &gt; <span class="number">2</span> &amp;&amp; tokens[<span class="number">1</span>] != <span class="string">"("</span> )&#123;</div><div class="line">			dst ~= tokens.front;</div><div class="line">			tokens.popFront();</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">break</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>に書きかえることでこれを防ぐことができます。</p>
<h1 id="あとがき・怨嗟の声"><a href="/blog/2017/03/21/cj2985e5v0005nyfg9eymj2i6/#あとがき・怨嗟の声" class="headerlink" title="あとがき・怨嗟の声"></a>あとがき・怨嗟の声</h1><p>はっきり言って、Rejected Software製のソフトウェア・ライブラリの質は低いと思います。<br>dubやvibe.dなどでD言語の存在感を高めた功績は大きいですが、ソフトウェアの品質が低いことでD言語に対して負の影響がないか心配です。(個人的には、dubは遅いパッケージレジストリに毎回リクエストするなど問題が多く、vibe.dもカジュアルにnullを返すなどの設計上の問題がある)<br>私はD言語が流行らない理由としてライブラリの不足も一因であると考えていますが、だからといって品質の低いライブラリを無闇に増やすのも問題だと思います。<br>D言語は本当に素晴しい言語だと思います。この言語が多くの人々に末長く親しまれることを願っています。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;皆さん、D言語使ってますか？&lt;br&gt;ドキュメント書いてますか？(ブーメラン)&lt;/p&gt;
&lt;h1 id=&quot;ddoxとは&quot;&gt;&lt;a href=&quot;/blog/2017/03/21/cj2985e5v0005nyfg9eymj2i6/#ddoxとは&quot; class=&quot;headerlink
    
    </summary>
    
      <category term="technology" scheme="https://tosuke.github.io/categories/technology/"/>
    
      <category term="dlang" scheme="https://tosuke.github.io/categories/technology/dlang/"/>
    
    
      <category term="lifelog" scheme="https://tosuke.github.io/tags/lifelog/"/>
    
  </entry>
  
  <entry>
    <title>失われつつあるコンテンツと共に生きるということ</title>
    <link href="https://tosuke.github.io/2016/12/28/cj2985e5q0004nyfg08h108h5/"/>
    <id>https://tosuke.github.io/2016/12/28/cj2985e5q0004nyfg08h108h5/</id>
    <published>2016-12-28T08:59:31.000Z</published>
    <updated>2017-03-22T06:04:13.435Z</updated>
    
    <content type="html"><![CDATA[<p>私は<a href="http://aokihagane.com/" target="_blank" rel="external">蒼き鋼のアルペジオ</a>が好きだ。<br>しかし、このページを見てくれた人なら分かると思うが、今年の3月からほぼ更新されていない。</p>
<p>どんなに輝いていたコンテンツであっても、時間がたてば誰にも見向きもされなくなり、やがて記憶の中からも消える。<br>(これはツイッターなどのオタクを見ていればわかるだろう、「ツイのオタクの嫁は季節ごとに変わる」とはよく言ったものだ。)</p>
<p>時間は残酷だ。どんなものからもゆっくりと、確実に、輝きを奪っていく。</p>
<p>私はこれに対して有効な対策を何一つ知らない。</p>
<p>それでも、私はこの蒼き鋼のアルペジオというコンテンツを忘れたくないと思うし、忘れていたとしても買っていたグッズやら何やらを何かの拍子に見つけ、ハマっていた日々を思い出すのだろう。<br>我々はそのためにグッズを買っているのかもしれない。</p>
<p><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></p>
<h1 id="閑話休題"><a href="/blog/2016/12/28/cj2985e5q0004nyfg08h108h5/#閑話休題" class="headerlink" title="閑話休題"></a>閑話休題</h1><p>と、このようにエモい感じで書いてみたが、いかがだっただろうか。<br>個人的にはなかなかエモ記事専門ブログの雰囲気を再現できたんじゃないかと思っている。<br>この記事を書くことでエモい文章を書くための知見がだいぶ得られたので、近々その知見をまとめてブログに書こうとでも考えている。</p>
<h1 id="おわりに"><a href="/blog/2016/12/28/cj2985e5q0004nyfg08h108h5/#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>自分の性に合わない雰囲気の文章を書くのは疲れますね…</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;私は&lt;a href=&quot;http://aokihagane.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;蒼き鋼のアルペジオ&lt;/a&gt;が好きだ。&lt;br&gt;しかし、このページを見てくれた人なら分かると思うが、今年の3月からほぼ更新されていない。&lt;/p&gt;

    
    </summary>
    
      <category term="poem" scheme="https://tosuke.github.io/categories/poem/"/>
    
    
      <category term="anime" scheme="https://tosuke.github.io/tags/anime/"/>
    
  </entry>
  
  <entry>
    <title>packerをビルドしてインストール</title>
    <link href="https://tosuke.github.io/2016/12/19/cj2985e5f0001nyfgckzq8r0p/"/>
    <id>https://tosuke.github.io/2016/12/19/cj2985e5f0001nyfgckzq8r0p/</id>
    <published>2016-12-19T14:01:04.000Z</published>
    <updated>2017-03-22T06:04:13.435Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://blog.surume.tk/yaourt-build-install/" target="_blank" rel="external">yaourtをビルドしてインストール</a>に対抗して。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /tmp</div><div class="line">mkdir aur</div><div class="line"><span class="built_in">cd</span> aur</div><div class="line">git <span class="built_in">clone</span> <a href="https://aur.archlinux.org/packer.git" target="_blank" rel="noopener noreferrer">https://aur.archlinux.org/packer.git</a></div><div class="line"><span class="built_in">cd</span> packer</div><div class="line">makepkg -sri</div><div class="line"><span class="built_in">cd</span> ../../</div><div class="line">rm -rf aur</div></pre></td></tr></table></figure>
<p>個人的にはpackerのほうが軽いし依存も少ないしで好きです</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://blog.surume.tk/yaourt-build-install/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;yaourtをビルドしてインストール&lt;/a&gt;に対抗して。&lt;/p&gt;
&lt;figure class=&quot;high
    
    </summary>
    
      <category term="technology" scheme="https://tosuke.github.io/categories/technology/"/>
    
      <category term="linux" scheme="https://tosuke.github.io/categories/technology/linux/"/>
    
    
      <category term="archlinux" scheme="https://tosuke.github.io/tags/archlinux/"/>
    
      <category term="lifelog" scheme="https://tosuke.github.io/tags/lifelog/"/>
    
  </entry>
  
  <entry>
    <title>first-post</title>
    <link href="https://tosuke.github.io/2016/12/18/cj2985e570000nyfg6onnt1ea/"/>
    <id>https://tosuke.github.io/2016/12/18/cj2985e570000nyfg6onnt1ea/</id>
    <published>2016-12-18T04:21:33.000Z</published>
    <updated>2017-03-22T06:04:13.435Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめまして"><a href="/blog/2016/12/18/cj2985e570000nyfg6onnt1ea/#はじめまして" class="headerlink" title="はじめまして"></a>はじめまして</h1><h2 id="自己紹介"><a href="/blog/2016/12/18/cj2985e570000nyfg6onnt1ea/#自己紹介" class="headerlink" title="自己紹介"></a>自己紹介</h2><h3 id="名前"><a href="/blog/2016/12/18/cj2985e570000nyfg6onnt1ea/#名前" class="headerlink" title="名前"></a>名前</h3><p>Tosuke</p>
<p>本名を魔改造してできた文字列です。特に意味はありません。(どうやらとすけは輪投げという意味らしい)</p>
<h3 id="生息場所"><a href="/blog/2016/12/18/cj2985e570000nyfg6onnt1ea/#生息場所" class="headerlink" title="生息場所"></a>生息場所</h3><p>主に<a href="https://twitter.com/amakoprg" target="_blank" rel="external">Twitter</a>に生息しています。<br><a href="https://miiverse.nintendo.net/users/amakoprg" target="_blank" rel="external">Miiverse</a>にもたまに出没しています。<br>某限界SNSでも姿を確認できると思います。</p>
<h3 id="できること"><a href="/blog/2016/12/18/cj2985e570000nyfg6onnt1ea/#できること" class="headerlink" title="できること"></a>できること</h3><p>主に<a href="https://dlang.org" target="_blank" rel="external">D言語</a>を書いています。その流れでC言語やC++(ほんの少し、読める程度)もできます。<br>Pythonも一応経験あります。(文法やった程度)</p>
<p>特殊なところでは<a href="http://smilebasic.com" target="_blank" rel="external">SmileBasic</a>を書きます。</p>
<h3 id="職業"><a href="/blog/2016/12/18/cj2985e570000nyfg6onnt1ea/#職業" class="headerlink" title="職業"></a>職業</h3><p>宮城県の某高校の学生です。(2016年現在)</p>
<h2 id="ブログを始めた理由"><a href="/blog/2016/12/18/cj2985e570000nyfg6onnt1ea/#ブログを始めた理由" class="headerlink" title="ブログを始めた理由"></a>ブログを始めた理由</h2><p>上で書いた通り、私はTwitterによく出没しています。<br>その中で、その時々に感じたことや知見をTwitterに書くことで流れてしまい、<br>書いた本人ですらそれを再び見ることがないということがかなり多くありました。<br>ブログという形で書きとめておくことはそのような問題に対する有効な解決手段だと思っています。</p>
<p>とはいうものの、私はブログを立ちあげることを長らく面倒くさがっていました。<br>しかし、私は<a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>を知り、これを使えば簡単にブログを立ち上げることができることを知り、ブログを立ち上げました(宣伝)</p>
<h2 id="書こうと思っていること"><a href="/blog/2016/12/18/cj2985e570000nyfg6onnt1ea/#書こうと思っていること" class="headerlink" title="書こうと思っていること"></a>書こうと思っていること</h2><ul>
<li>技術的な知見</li>
<li>ポエム</li>
<li>ただのメモ</li>
</ul>
<p>要はチラシの裏案件です。<br>おそらく半分くらいは全く役に立たない内容になると思いますが、つらつら書いていこうと思います。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;はじめまして&quot;&gt;&lt;a href=&quot;/blog/2016/12/18/cj2985e570000nyfg6onnt1ea/#はじめまして&quot; class=&quot;headerlink&quot; title=&quot;はじめまして&quot;&gt;&lt;/a&gt;はじめまして&lt;/h1&gt;&lt;h2 id=&quot;自己紹介&quot;&gt;
    
    </summary>
    
      <category term="uncategorized" scheme="https://tosuke.github.io/categories/uncategorized/"/>
    
    
      <category term="blog" scheme="https://tosuke.github.io/tags/blog/"/>
    
  </entry>
  
</feed>
